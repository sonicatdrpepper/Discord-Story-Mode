Event/Cutscene documentation:
For a event to be triggered, the line must contain **only** the event call, it cant be on the same line as other text.
Example:
This is an example of how to trigger an event in a cutscene.
{END}

each cutscene is made up of two files. the .cut file contains the actual data for the cutscene, including events. the .md file contains some metadata about the cutscene, such as its name, and which NPC's are present.

Currently planned events are listed below. Events with a * in front of them are unimplemented as of writing this.
{END} {BATTLE} *{ITEM} *{DIALOGUE_RESPONSE} {WAIT}

{END} will simply end the cutscene when it is triggered
{BATTLE} will initiate a battle with the fist NPC listed in the enemy npc's field (line 3) of the metadata file
*{ITEM} will add an item(s) to the players inventory (not implemented, behavior may change)
*{DIALOGUE_REPONSE} will make the cutscene player wait for the player to send a response
{WAIT} makes the cutscene player wait for a sepcified amount of seconds. the line directly after/below a {WAIT} event should be the amount of 
seconds that you want it to wait for. For example, to make it wait for 5.55 seconds, you would put the following in your file.

{WAIT}
5.5

// is a comment, and any lines that start with it will be ignored

Limitations:
There can only be one event per cutscene. This limiation applies to every event besides the {WAIT} event, you can have as many of those as you want per file.
Events other than the wait event will cause the cutscene player to exit in order to execute the event. A possible workaround for this would be to split cutscenes
You can only battle one NPC per cutscene, and it will always be the first NPC in the Enemy_NPC's field of the cutscene metadata.

The metadata file should be formatted as follows:
line 1 contains the name of the cutscene
line 2 contains a list of friendly NPC's present in the cutscene, they should be reffered to by their ID in the Database, and each NPC ID should be seperated by a comma.
line 3 is formatted the same as line 2, but is used for enemy NPC's. the first entry in list is also the one that a fight will be initiated against when the {BATTLE} event is triggered.

Inventory Structure:
The inventory is simply a table in the main SQLite database.
The first column contains the player's ID, and subsequent columns contain the amount of each type of item present in the game.
The properties of these items will be stored in either another SQLite table, maybe a plaintext file, or just like a table/2d array in one of the python script files.